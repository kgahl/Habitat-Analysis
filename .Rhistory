if(Meso == 0){
HSC_data <- filter(Data_i, Presence == 1)                                     #isolate occupied site data
###Velocity
#Find suitable ranges
HSC_Velocity <- HSC_data[,c('Presence','Velocity')]                       #replaced y with Presence
HSC_Velocity <- HSC_Velocity[order(HSC_Velocity$Velocity),]
# if(nrow(HSC_Velocity)<=0){
#   HSC_Velocity$Rank <- seq(1,0.001)
# }else{
HSC_Velocity$Rank <- seq(1,nrow(HSC_Velocity))
#assigns rank
HSC_Velocity$Prob <- HSC_Velocity$Rank/(nrow(HSC_Velocity)+1)             #determine probability: rank/ n+1.  N = number occupied
Velocity_25 <- quantile(HSC_Velocity$Velocity, 0.25, na.rm = TRUE)        #quantiles to determine ends of percentage range
Velocity_75 <- quantile(HSC_Velocity$Velocity, 0.75, na.rm = TRUE)
Velocity_5 <- quantile(HSC_Velocity$Velocity, 0.05, na.rm = TRUE)
Velocity_95 <- quantile(HSC_Velocity$Velocity, 0.95, na.rm = TRUE)
HSC_Velocity$Suitable <- ifelse(HSC_Velocity$Velocity                     #determine central 50% of observations (between 25 and 75% probability)
>= Velocity_25 & HSC_Velocity$Velocity
<= Velocity_75, 1, 0)
HSC_Velocity$Suitable_90 <- ifelse(HSC_Velocity$Velocity                  #determine central 90% of observations
>= Velocity_5 & HSC_Velocity$Velocity
<= Velocity_95, 1, 0)
#Classify each available point as suitable or unsuitable
Avail_Data$Velocity_Suitable <- ifelse(Avail_Data$Velocity >= Velocity_25
& Avail_Data$Velocity <= Velocity_75,
1, 0)
Avail_Data$Velocity_Suitable_90 <- ifelse(Avail_Data$Velocity >= Velocity_5
& Avail_Data$Velocity <= Velocity_95,
1, 0)
##Central 50%
Storage$Velocity_25_Suit_Used[i] <- sum(HSC_Velocity$Suitable == 1, na.rm = T)
Storage$Velocity_25_UnSuit_Used[i] <- sum(HSC_Velocity$Suitable == 0, na.rm = T)
Storage$Velocity_25_Suit_Avail[i] <- sum(Avail_Data$Velocity_Suitable == 1, na.rm = T)
Storage$Velocity_25_UnSuit_Avail[i] <- sum(Avail_Data$Velocity_Suitable == 0, na.rm = T)
Storage$Velocity_25[i] <- Velocity_25
Storage$Velocity_75[i] <- Velocity_75
con_tab_Suit50_v <- matrix(c(Storage[i,c("Velocity_25_Suit_Used",
"Velocity_25_UnSuit_Used",
"Velocity_25_Suit_Avail",
"Velocity_25_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_v <- Storage$Velocity_25_Suit_Used[i]
avail_unsuit_v <- Storage$Velocity_25_UnSuit_Avail[i]
used_unsuit_v <- Storage$Velocity_25_UnSuit_Used[i]
avail_suit_v <- Storage$Velocity_25_Suit_Avail[i]
t_stat_v <- ((sum(unlist(con_tab_Suit50_v)))^0.5)*
((used_suit_v*avail_unsuit_v) - (used_unsuit_v*avail_suit_v))/
(((used_suit_v+avail_suit_v)*
(used_unsuit_v+avail_unsuit_v)*
(used_unsuit_v+used_suit_v)*
(avail_suit_v+avail_unsuit_v))^0.5)
Storage$Velocity_t_stat_50[i] <- t_stat_v
Storage$Velocity_p_50[i] <- ifelse(t_stat_v > 1.6449,1,0)                 #1.6449 is the critical value for t-statistic when alpha = 0.05
##Central 90%
Storage$Velocity_5_Suit_Used[i] <- sum(HSC_Velocity$Suitable_90==1,na.rm=T)
Storage$Velocity_5_UnSuit_Used[i] <- sum(HSC_Velocity$Suitable_90==0,na.rm=T)
Storage$Velocity_5_Suit_Avail[i] <- sum(Avail_Data$Velocity_Suitable_90==1,na.rm=T)
Storage$Velocity_5_UnSuit_Avail[i] <- sum(Avail_Data$Velocity_Suitable_90==0,na.rm=T)
Storage$Velocity_5[i] <- Velocity_5
Storage$Velocity_95[i] <- Velocity_95
con_tab_Suit90_v <- matrix(c(Storage[i,c("Velocity_5_Suit_Used",
"Velocity_5_UnSuit_Used",
"Velocity_5_Suit_Avail",
"Velocity_5_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_v_90 <- Storage$Velocity_5_Suit_Used[i]
avail_unsuit_v_90 <- Storage$Velocity_5_UnSuit_Avail[i]
used_unsuit_v_90 <- Storage$Velocity_5_UnSuit_Used[i]
avail_suit_v_90 <- Storage$Velocity_5_Suit_Avail[i]
t_stat_v_90 <- ((sum(unlist(con_tab_Suit90_v)))^0.5)*
((used_suit_v_90*avail_unsuit_v_90)-(used_unsuit_v_90*avail_suit_v_90))/
(((used_suit_v_90+avail_suit_v_90)*
(used_unsuit_v_90+avail_unsuit_v_90)*
(used_unsuit_v_90+used_suit_v_90)*
(avail_suit_v_90+avail_unsuit_v_90))^0.5)
Storage$Velocity_t_stat_90[i] <- t_stat_v_90
Storage$Velocity_p_90[i] <- ifelse(t_stat_v_90 > 1.6449, 1, 0)            #1.6449 is the critical value for t-statistic when alpha = 0.05
###Depth Test
#Find Suitable Ranges
HSC_Depth <- HSC_data[,c('Presence', 'Depth')]                            #replaced y with Presence
HSC_Depth <- HSC_Depth[order(HSC_Depth$Depth),]                           #organizes Depth in ascending order
HSC_Depth$Rank <- seq(1,nrow(HSC_Depth))                                  #assigns rank
HSC_Depth$Prob <- HSC_Depth$Rank/(nrow(HSC_Depth)+1)                      #determine probability: rank/ n+1.  N = number occupied
Depth_25 <- quantile(HSC_Depth$Depth, 0.25, na.rm = TRUE)
Depth_75 <- quantile(HSC_Depth$Depth, 0.75, na.rm = TRUE)
Depth_5 <- quantile(HSC_Depth$Depth, 0.05, na.rm = TRUE)
Depth_95 <- quantile(HSC_Depth$Depth, 0.95, na.rm = TRUE)
HSC_Depth$Suitable <- ifelse(HSC_Depth$Depth                              #determine central 50% of observations (between 25 and 75% probability)
>= Depth_25 & HSC_Depth$Depth
<= Depth_75, 1, 0)
HSC_Depth$Suitable_90 <- ifelse(HSC_Depth$Depth                           #determine central 90% of observations
>= Depth_5 & HSC_Depth$Depth
<= Depth_95, 1, 0)
#Classify each available point as suitable or unsuitable
Avail_Data$Depth_Suitable <- ifelse(Avail_Data$Depth >= Depth_25
& Avail_Data$Depth <= Depth_75,
1, 0)
Avail_Data$Depth_Suitable_90 <- ifelse(Avail_Data$Depth >= Depth_5
& Avail_Data$Depth <= Depth_95,
1, 0)
##Central 50%
Storage$Depth_25_Suit_Used[i] <- sum(HSC_Depth$Suitable == 1, na.rm = T)
Storage$Depth_25_UnSuit_Used[i] <- sum(HSC_Depth$Suitable == 0, na.rm = T)
Storage$Depth_25_Suit_Avail[i] <- sum(Avail_Data$Depth_Suitable == 1, na.rm = T)
Storage$Depth_25_UnSuit_Avail[i] <- sum(Avail_Data$Depth_Suitable == 0, na.rm = T)
Storage$Depth_25[i] <- Depth_25
Storage$Depth_75[i] <- Depth_75
con_tab_Suit50_d <- matrix(c(Storage[i,c("Depth_25_Suit_Used",
"Depth_25_UnSuit_Used",
"Depth_25_Suit_Avail",
"Depth_25_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_d <- Storage$Depth_25_Suit_Used[i]
avail_unsuit_d <- Storage$Depth_25_UnSuit_Avail[i]
used_unsuit_d <- Storage$Depth_25_UnSuit_Used[i]
avail_suit_d <- Storage$Depth_25_Suit_Avail[i]
t_stat_d <- ((sum(unlist(con_tab_Suit50_d)))^0.5)*
((used_suit_d*avail_unsuit_d) - (used_unsuit_d*avail_suit_d))/
(((used_suit_d+avail_suit_d)*
(used_unsuit_d+avail_unsuit_d)*
(used_unsuit_d+used_suit_d)*
(avail_suit_d+avail_unsuit_d))^0.5)
Storage$Depth_t_stat_50[i] <- t_stat_d
Storage$Depth_p_50[i] <- ifelse(t_stat_d > 1.6449, 1, 0)                  #1.6449 is the critical value for t-statistic when alpha = 0.05
##Central 90%
Storage$Depth_5_Suit_Used[i] <- sum(HSC_Depth$Suitable_90 == 1, na.rm = T)
Storage$Depth_5_UnSuit_Used[i] <- sum(HSC_Depth$Suitable_90 == 0, na.rm = T)
Storage$Depth_5_Suit_Avail[i] <- sum(Avail_Data$Depth_Suitable_90 == 1, na.rm = T)
Storage$Depth_5_UnSuit_Avail[i] <- sum(Avail_Data$Depth_Suitable_90 == 0, na.rm = T)
Storage$Depth_5[i] <- Depth_5
Storage$Depth_95[i] <- Depth_95
con_tab_Suit90_d <- matrix(c(Storage[i,c("Depth_5_Suit_Used",
"Depth_5_UnSuit_Used",
"Depth_5_Suit_Avail",
"Depth_5_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_d_90 <- Storage$Depth_5_Suit_Used[i]
avail_unsuit_d_90 <- Storage$Depth_5_UnSuit_Avail[i]
used_unsuit_d_90 <- Storage$Depth_5_UnSuit_Used[i]
avail_suit_d_90 <- Storage$Depth_5_Suit_Avail[i]
t_stat_d_90 <- ((sum(unlist(con_tab_Suit90_d)))^0.5)*
((used_suit_d_90*avail_unsuit_d_90) - (used_unsuit_d_90*avail_suit_d_90))/
(((used_suit_d_90+avail_suit_d_90)*
(used_unsuit_d_90+avail_unsuit_d_90)*
(used_unsuit_d_90+used_suit_d_90)*
(avail_suit_d_90+avail_unsuit_d_90))^0.5)
Storage$Depth_t_stat_90[i] <- t_stat_d_90
Storage$Depth_p_90[i] <- ifelse(t_stat_d_90 > 1.6449, 1, 0)               #1.6449 is the critical value for t-statistic when alpha = 0.05
###Substrate
#Find suitable ranges
HSC_Substrate <- HSC_data[,c('Presence','Substrate')]                     #replaced y with Presence
HSC_Substrate <- HSC_Substrate[order(HSC_Substrate$Substrate),]           #organizes Substrate in ascending order
HSC_Substrate$Rank <- seq(1,nrow(HSC_Substrate))                          #assigns rank
HSC_Substrate$Prob <- HSC_Substrate$Rank/(nrow(HSC_Substrate)+1)          #determine probability: rank/ n+1.  N = number occupied
Substrate_25 <- quantile(HSC_Substrate$Substrate, 0.25, na.rm = TRUE)
Substrate_75 <- quantile(HSC_Substrate$Substrate, 0.75, na.rm = TRUE)
Substrate_5 <- quantile(HSC_Substrate$Substrate, 0.05, na.rm = TRUE)
Substrate_95 <- quantile(HSC_Substrate$Substrate, 0.95, na.rm = TRUE)
HSC_Substrate$Suitable <-ifelse(HSC_Substrate$Substrate >= Substrate_25   #determine central 50% of observations (between 25 and 75% probability)
& HSC_Substrate$Substrate <= Substrate_75,
1, 0)
HSC_Substrate$Suitable_90 <-ifelse(HSC_Substrate$Substrate >= Substrate_5 #determine central 90% of observations
& HSC_Substrate$Substrate <= Substrate_95,
1, 0)
#Classify each available point as suitable or unsuitable
Avail_Data$Substrate_Suitable <- ifelse(Avail_Data$Substrate >= Substrate_25
&Avail_Data$Substrate <= Substrate_75,
1, 0)
Avail_Data$Substrate_Suitable_90 <- ifelse(Avail_Data$Substrate >= Substrate_5
& Avail_Data$Substrate <= Substrate_95,
1, 0)
##Central 50%
Storage$Substrate_25_Suit_Used[i] <- sum(HSC_Substrate$Suitable == 1, na.rm = T)
Storage$Substrate_25_UnSuit_Used[i] <- sum(HSC_Substrate$Suitable == 0, na.rm = T)
Storage$Substrate_25_Suit_Avail[i] <- sum(Avail_Data$Substrate_Suitable == 1, na.rm = T)
Storage$Substrate_25_UnSuit_Avail[i] <- sum(Avail_Data$Substrate_Suitable == 0, na.rm = T)
Storage$Substrate_25[i] <- Substrate_25
Storage$Substrate_75[i] <- Substrate_75
con_tab_Suit50_s <- matrix(c(Storage[i,c("Substrate_25_Suit_Used",
"Substrate_25_UnSuit_Used",
"Substrate_25_Suit_Avail",
"Substrate_25_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_s <- Storage$Substrate_25_Suit_Used[i]
avail_unsuit_s <- Storage$Substrate_25_UnSuit_Avail[i]
used_unsuit_s <- Storage$Substrate_25_UnSuit_Used[i]
avail_suit_s <- Storage$Substrate_25_Suit_Avail[i]
t_stat_s <- ((sum(unlist(con_tab_Suit50_s)))^0.5)*
((used_suit_s*avail_unsuit_s) - (used_unsuit_s*avail_suit_s))/
(((used_suit_s+avail_suit_s)*
(used_unsuit_s+avail_unsuit_s)*
(used_unsuit_s+used_suit_s)*
(avail_suit_s+avail_unsuit_s))^0.5)
Storage$Substrate_t_stat_50[i] <- t_stat_s
Storage$Substrate_p_50[i] <- ifelse(t_stat_s > 1.6449, 1, 0)              #1.6449 is the critical value for t-statistic when alpha = 0.05
##Central 90%
Storage$Substrate_5_Suit_Used[i] <- sum(HSC_Substrate$Suitable_90 == 1, na.rm = T)
Storage$Substrate_5_UnSuit_Used[i] <- sum(HSC_Substrate$Suitable_90 == 0, na.rm = T)
Storage$Substrate_5_Suit_Avail[i] <- sum(Avail_Data$Substrate_Suitable_90 == 1, na.rm = T)
Storage$Substrate_5_UnSuit_Avail[i] <- sum(Avail_Data$Substrate_Suitable_90 == 0, na.rm = T)
Storage$Substrate_5[i] <- Substrate_5
Storage$Substrate_95[i] <- Substrate_95
con_tab_Suit90_s <- matrix(c(Storage[i,c("Substrate_5_Suit_Used",
"Substrate_5_UnSuit_Used",
"Substrate_5_Suit_Avail",
"Substrate_5_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_s_90 <- Storage$Substrate_5_Suit_Used[i]
avail_unsuit_s_90 <- Storage$Substrate_5_UnSuit_Avail[i]
used_unsuit_s_90 <- Storage$Substrate_5_UnSuit_Used[i]
avail_suit_s_90 <- Storage$Substrate_5_Suit_Avail[i]
t_stat_s_90 <-((sum(unlist(con_tab_Suit90_s)))^0.5)*
((used_suit_s_90*avail_unsuit_s_90) - (used_unsuit_s_90*avail_suit_s_90))/
(((used_suit_s_90+avail_suit_s_90)*
(used_unsuit_s_90+avail_unsuit_s_90)*
(used_unsuit_s_90+used_suit_s_90)*
(avail_suit_s_90+avail_unsuit_s_90))^0.5)
Storage$Substrate_t_stat_90[i] <- t_stat_s_90
Storage$Substrate_p_90[i] <- ifelse(t_stat_s_90 > 1.6449, 1, 0)           #1.6449 is the critical value for t-statistic when alpha = 0.05
###Instream
#Find suitable ranges
HSC_Instream <- HSC_data[,c('Presence','Instream')]                       #replaced y with Presence
HSC_Instream <- HSC_Instream[order(HSC_Instream$Instream),]               #organizes Instream in ascending order
HSC_Instream$Rank <- seq(1,nrow(HSC_Instream))                            #assigns rank
HSC_Instream$Prob <- HSC_Instream$Rank/(nrow(HSC_Instream)+1)             #determine probability: rank/ n+1.  N = number occupied
Instream_25 <- quantile(HSC_Instream$Instream, 0.25, na.rm = TRUE)        #quantiles to determine ends of percentage range
Instream_75 <- quantile(HSC_Instream$Instream, 0.75, na.rm = TRUE)
Instream_5 <- quantile(HSC_Instream$Instream, 0.05, na.rm = TRUE)
Instream_95 <- quantile(HSC_Instream$Instream, 0.95, na.rm = TRUE)
HSC_Instream$Suitable <- ifelse(HSC_Instream$Instream                     #determine central 50% of observations (between 25 and 75% probability)
>= Instream_25 & HSC_Instream$Instream
<= Instream_75, 1, 0)
HSC_Instream$Suitable_90 <- ifelse(HSC_Instream$Instream                  #determine central 90% of observations
>= Instream_5 & HSC_Instream$Instream
<= Instream_95, 1, 0)
#Classify each available point as suitable or unsuitable
Avail_Data$Instream_Suitable <- ifelse(Avail_Data$Instream >= Instream_25
& Avail_Data$Instream <= Instream_75,
1, 0)
Avail_Data$Instream_Suitable_90 <- ifelse(Avail_Data$Instream >= Instream_5
& Avail_Data$Instream <= Instream_95,
1, 0)
##Central 50%
Storage$Instream_25_Suit_Used[i] <- sum(HSC_Instream$Suitable == 1, na.rm = T)
Storage$Instream_25_UnSuit_Used[i] <- sum(HSC_Instream$Suitable == 0, na.rm = T)
Storage$Instream_25_Suit_Avail[i] <- sum(Avail_Data$Instream_Suitable == 1, na.rm = T)
Storage$Instream_25_UnSuit_Avail[i] <- sum(Avail_Data$Instream_Suitable == 0, na.rm = T)
Storage$Instream_25[i] <- Instream_25
Storage$Instream_75[i] <- Instream_75
con_tab_Suit50_i <- matrix(c(Storage[i,c("Instream_25_Suit_Used",
"Instream_25_UnSuit_Used",
"Instream_25_Suit_Avail",
"Instream_25_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_i <- Storage$Instream_25_Suit_Used[i]
avail_unsuit_i <- Storage$Instream_25_UnSuit_Avail[i]
used_unsuit_i <- Storage$Instream_25_UnSuit_Used[i]
avail_suit_i <- Storage$Instream_25_Suit_Avail[i]
t_stat_i <- ((sum(unlist(con_tab_Suit50_i)))^0.5)*
((used_suit_i*avail_unsuit_i) - (used_unsuit_i*avail_suit_i))/
(((used_suit_i+avail_suit_i)*
(used_unsuit_i+avail_unsuit_i)*
(used_unsuit_i+used_suit_i)*
(avail_suit_i+avail_unsuit_i))^0.5)
Storage$Instream_t_stat_50[i] <- t_stat_i
Storage$Instream_p_50[i] <- ifelse(t_stat_i > 1.6449,1,0)                 #1.6449 is the critical value for t-statistic when alpha = 0.05
##Central 90%
Storage$Instream_5_Suit_Used[i] <- sum(HSC_Instream$Suitable_90==1,na.rm=T)
Storage$Instream_5_UnSuit_Used[i] <- sum(HSC_Instream$Suitable_90==0,na.rm=T)
Storage$Instream_5_Suit_Avail[i] <- sum(Avail_Data$Instream_Suitable_90==1,na.rm=T)
Storage$Instream_5_UnSuit_Avail[i] <- sum(Avail_Data$Instream_Suitable_90==0,na.rm=T)
Storage$Instream_5[i] <- Instream_5
Storage$Instream_95[i] <- Instream_95
con_tab_Suit90_i <- matrix(c(Storage[i,c("Instream_5_Suit_Used",
"Instream_5_UnSuit_Used",
"Instream_5_Suit_Avail",
"Instream_5_UnSuit_Avail")]),
byrow=T,
nrow=2)
used_suit_i_90 <- Storage$Instream_5_Suit_Used[i]
avail_unsuit_i_90 <- Storage$Instream_5_UnSuit_Avail[i]
used_unsuit_i_90 <- Storage$Instream_5_UnSuit_Used[i]
avail_suit_i_90 <- Storage$Instream_5_Suit_Avail[i]
t_stat_i_90 <- ((sum(unlist(con_tab_Suit90_i)))^0.5)*
((used_suit_i_90*avail_unsuit_i_90)-(used_unsuit_i_90*avail_suit_i_90))/
(((used_suit_i_90+avail_suit_i_90)*
(used_unsuit_i_90+avail_unsuit_i_90)*
(used_unsuit_i_90+used_suit_i_90)*
(avail_suit_i_90+avail_unsuit_i_90))^0.5)
Storage$Instream_t_stat_90[i] <- t_stat_i_90
Storage$Instream_p_90[i] <- ifelse(t_stat_i_90 > 1.6449, 1, 0)            #1.6449 is the critical value for t-statistic when alpha = 0.05
###Canopy
#Count of each category
Occupied_Canopy <- sum(na.omit(Used_Data_i$Canopy > 0))
Available_Canopy <- sum(na.omit(Avail_Data$Canopy > 0))
Occupied_NoCanopy <- sum(na.omit(Used_Data_i$Canopy == 0))
Available_NoCanopy <- sum(na.omit(Avail_Data$Canopy == 0))
#Restructure into a matrix
Canopy_Matrix <- matrix(c(Occupied_Canopy,   Available_Canopy,            #Occupied (observed) should be in left column, Available (expected) should be in right column
Occupied_NoCanopy, Available_NoCanopy),
byrow = T, nrow = 2)
#Store Chi square value and p value
Chi_df <- as.data.frame(t(unlist(chisq.test(Canopy_Matrix,
correct = FALSE))),
quote=FALSE)                                    #run chi square, separate each value (unlist), place into dataframe (as.data.frame), transpose rows into columns (t), remove quotations (quote = false), don't apply continuity correction (correct = False)
Storage$Canopy_Chi[i] <- as.numeric(Chi_df$`statistic.X-squared`)
Storage$Canopy_P[i]   <- as.numeric(Chi_df$p.value)
Storage$OccCan[i]     <- Occupied_Canopy
Storage$OccNoCan[i]   <- Occupied_NoCanopy
Storage$AvailCan[i]   <- Available_Canopy
Storage$AvailNoCan[i] <- Available_NoCanopy
#Setup for support probability
Storage$C_Prob_Support0.05[i] <- ifelse(Storage$Canopy_P > 0.05, 0, 1)   #0 shows occupied is not different from available
}
}
##### SUMMARIZE RESULTS #####
#### Storage Database ####
#for each variable combo
Results_File <- paste0(Species_Abb, "_",
Stream_Abb, "_",
Group_Abb, "_",
Mesohabitat_Abb, "_Tolerance_March_Excluded.csv")                   #Change _Storage.csv if distinguishing between different test runs
write.csv(x = Storage, file = Results_File)
#### Storage Means ####
#Summarize and save results into one master file
##Mesohabitat
if (Meso == 1) {
Storage_Means <- Storage %>%
summarize(across(c(Ratio_Pool, Ratio_Riffle, Ratio_Run,
Mesohabitat_Riffle, Mesohabitat_Run), mean))                                         #create and pull out means of Mesohabitat storage columns
#Mesohabitat Ratio and RSF Quantiles
#Pool Ratio
Storage_Means$RPool_95L <- quantile(Storage$Ratio_Pool, probs = 0.025, na.rm = TRUE)      #95 CI (2.5 to 97.5)
Storage_Means$RPool_95H <- quantile(Storage$Ratio_Pool, probs = 0.975, na.rm = TRUE)
Storage_Means$RPool_80L <- quantile(Storage$Ratio_Pool, probs = 0.1, na.rm = TRUE)
Storage_Means$RPool_80H <- quantile(Storage$Ratio_Pool, probs = 0.9, na.rm = TRUE)
Storage_Means$RPool_Percent_Support <- ifelse(mean(Storage$Ratio_Pool)>1,   #for Selection Ratio 1 is the measure of proportional use (<1 = avoid, >1 = select)
mean(Storage$Ratio_Pool>1),
mean(Storage$Ratio_Pool<1))   #gives percentage of re-sampled slopes that match the charge(+/-) of the mean estimate
#Riffle Ratio
Storage_Means$RRiffle_95L <- quantile(Storage$Ratio_Riffle, probs = 0.025, na.rm = TRUE)
Storage_Means$RRiffle_95H <- quantile(Storage$Ratio_Riffle, probs = 0.975, na.rm = TRUE)
Storage_Means$RRiffle_80L <- quantile(Storage$Ratio_Riffle, probs = 0.1, na.rm = TRUE)
Storage_Means$RRiffle_80H <- quantile(Storage$Ratio_Riffle, probs = 0.9, na.rm = TRUE)
Storage_Means$RRiffle_Percent_Support <- ifelse(mean(Storage$Ratio_Riffle)>1,
mean(Storage$Ratio_Riffle>1),
mean(Storage$Ratio_Riffle<1))
#Run Ratio
Storage_Means$RRun_95L <- quantile(Storage$Ratio_Run, probs = 0.025, na.rm = TRUE)
Storage_Means$RRun_95H <- quantile(Storage$Ratio_Run, probs = 0.975, na.rm = TRUE)
Storage_Means$RRun_80L <- quantile(Storage$Ratio_Run, probs = 0.1, na.rm = TRUE)
Storage_Means$RRun_80H <- quantile(Storage$Ratio_Run, probs = 0.9, na.rm = TRUE)
Storage_Means$RRun_Percent_Support <- ifelse(mean(Storage$Ratio_Run)>1,
mean(Storage$Ratio_Run>1),
mean(Storage$Ratio_Run<1))
#Riffle RSF
Storage_Means$MesoRiffle_95L <- quantile(Storage$Mesohabitat_Riffle, probs = 0.025, na.rm = TRUE)
Storage_Means$MesoRiffle_95H <- quantile(Storage$Mesohabitat_Riffle, probs = 0.975, na.rm = TRUE)
Storage_Means$MesoRiffle_80L <- quantile(Storage$Mesohabitat_Riffle, probs = 0.1, na.rm = TRUE)
Storage_Means$MesoRiffle_80H <- quantile(Storage$Mesohabitat_Riffle, probs = 0.9, na.rm = TRUE)
Storage_Means$MesoRiffle_Percent_Support <- ifelse(mean(Storage$Mesohabitat_Riffle)>0,       #For GLM RSFs 0 is the divide, - equals avoid, + equals selection
mean(Storage$Mesohabitat_Riffle>0),
mean(Storage$Mesohabitat_Riffle<0))
#Run RSF
Storage_Means$MesoRun_95L <- quantile(Storage$Mesohabitat_Run, probs = 0.025, na.rm = TRUE)
Storage_Means$MesoRun_95H <- quantile(Storage$Mesohabitat_Run, probs = 0.975, na.rm = TRUE)
Storage_Means$MesoRun_80L <- quantile(Storage$Mesohabitat_Run, probs = 0.1, na.rm = TRUE)
Storage_Means$MesoRun_80H <- quantile(Storage$Mesohabitat_Run, probs = 0.9, na.rm = TRUE)
Storage_Means$MesoRun_Percent_Support <- ifelse(mean(Storage$Mesohabitat_Run)>0,
mean(Storage$Mesohabitat_Run>0),
mean(Storage$Mesohabitat_Run<0))
Storage_Means = Storage_Means %>%
select("Ratio_Pool", "RPool_95L", "RPool_95H", "RPool_80L", "RPool_80H", "RPool_Percent_Support",
"Ratio_Riffle", "RRiffle_95L", "RRiffle_95H", "RRiffle_80L", "RRiffle_80H", "RRiffle_Percent_Support",
"Ratio_Run", "RRun_95L", "RRun_95H", "RRun_80L", "RRun_80H", "RRun_Percent_Support",
"Mesohabitat_Riffle", "MesoRiffle_95L", "MesoRiffle_95H", "MesoRiffle_80L", "MesoRiffle_80H", "MesoRiffle_Percent_Support",
"Mesohabitat_Run", "MesoRun_95L", "MesoRun_95H", "MesoRun_80L", "MesoRun_80H", "MesoRun_Percent_Support") %>%
mutate(across(where(is.numeric), round, 3))
}
##VDS
else{
mean(Storage$Canopy_Chi)
Storage_Means <- Storage %>%
summarize(across(-c(Velocity_5_Suit_Used, Velocity_5_Suit_Avail, Velocity_5_UnSuit_Used, Velocity_5_UnSuit_Avail,
Substrate_5_Suit_Used, Substrate_5_Suit_Avail, Substrate_5_UnSuit_Used, Substrate_5_UnSuit_Avail,
Depth_5_Suit_Used, Depth_5_Suit_Avail, Depth_5_UnSuit_Used, Depth_5_UnSuit_Avail,
Instream_5_Suit_Used, Instream_5_Suit_Avail, Instream_5_UnSuit_Used, Instream_5_UnSuit_Avail,
Velocity_25_Suit_Used, Velocity_25_Suit_Avail, Velocity_25_UnSuit_Used, Velocity_25_UnSuit_Avail,
Substrate_25_Suit_Used, Substrate_25_Suit_Avail, Substrate_25_UnSuit_Used, Substrate_25_UnSuit_Avail,
Depth_25_Suit_Used, Depth_25_Suit_Avail, Depth_25_UnSuit_Used, Depth_25_UnSuit_Avail,
Instream_25_Suit_Used, Instream_25_Suit_Avail, Instream_25_UnSuit_Used, Instream_25_UnSuit_Avail,
OccCan, OccNoCan, AvailCan, AvailNoCan), mean)) %>%
rename('Velocity Coef' = Velocity, 'Depth Coef' = Depth, 'Sub Coef' = Substrate,
'VelFull Coef' = Velocity_full, 'DepthFull Coef' = Depth_full,
'Instream Coef' = Instream, 'Canopy Coef' = Canopy) %>%
bind_cols(MinMax)                                                                 #Add Min/Max columns to database
#VDS RSF Quantiles
#Velocity RSF
Storage_Means$Velocity_95L <- quantile(Storage$Velocity, probs = 0.025, na.rm = TRUE)             #95 CI (2.5 to 97.5)
Storage_Means$Velocity_95H <- quantile(Storage$Velocity, probs = 0.975, na.rm = TRUE)
Storage_Means$Velocity_80L <- quantile(Storage$Velocity, probs = 0.1, na.rm = TRUE)               #80 CI (10 to 90)
Storage_Means$Velocity_80H <- quantile(Storage$Velocity, probs = 0.9, na.rm = TRUE)
Storage_Means$V_Percent_Support <- ifelse(mean(Storage$Velocity)>0,
mean(Storage$Velocity>0),
mean(Storage$Velocity<0))                 #gives percentage of re-sampled slopes that match the charge(+/-) of the mean estimate
#Depth RSF
Storage_Means$Depth_95L <- quantile(Storage$Depth, probs = 0.025, na.rm = TRUE)
Storage_Means$Depth_95H <- quantile(Storage$Depth, probs = 0.975, na.rm = TRUE)
Storage_Means$Depth_80L <- quantile(Storage$Depth, probs = 0.1, na.rm = TRUE)
Storage_Means$Depth_80H <- quantile(Storage$Depth, probs = 0.9, na.rm = TRUE)
Storage_Means$D_Percent_Support <- ifelse(mean(Storage$Depth)>0,
mean(Storage$Depth>0),
mean(Storage$Depth<0))
#Substrate RSF
Storage_Means$Sub_95L <- quantile(Storage$Substrate, probs = 0.025, na.rm = TRUE)
Storage_Means$Sub_95H <- quantile(Storage$Substrate, probs = 0.975, na.rm = TRUE)
Storage_Means$Sub_80L <- quantile(Storage$Substrate, probs = 0.1, na.rm = TRUE)
Storage_Means$Sub_80H <- quantile(Storage$Substrate, probs = 0.9, na.rm = TRUE)
Storage_Means$S_Percent_Support <- ifelse(mean(Storage$Substrate)>0,
mean(Storage$Substrate>0),
mean(Storage$Substrate<0))
#Velocity Full RSF
Storage_Means$VelFull_95L <- quantile(Storage$Velocity_full, probs = 0.025, na.rm = TRUE)
Storage_Means$VelFull_95H <- quantile(Storage$Velocity_full, probs = 0.975, na.rm = TRUE)
Storage_Means$VelFull_80L <- quantile(Storage$Velocity_full, probs = 0.1, na.rm = TRUE)
Storage_Means$VelFull_80H <- quantile(Storage$Velocity_full, probs = 0.9, na.rm = TRUE)
Storage_Means$VF_Percent_Support <- ifelse(mean(Storage$Velocity_full)>0,
mean(Storage$Velocity_full>0),
mean(Storage$Velocity_full<0))
#Depth Full RSF
Storage_Means$DepthFull_95L <- quantile(Storage$Depth_full, probs = 0.025, na.rm = TRUE)
Storage_Means$DepthFull_95H <- quantile(Storage$Depth_full, probs = 0.975, na.rm = TRUE)
Storage_Means$DepthFull_80L <- quantile(Storage$Depth_full, probs = 0.1, na.rm = TRUE)
Storage_Means$DepthFull_80H <- quantile(Storage$Depth_full, probs = 0.9, na.rm = TRUE)
Storage_Means$DF_Percent_Support <- ifelse(mean(Storage$Depth_full)>0,
mean(Storage$Depth_full>0),
mean(Storage$Depth_full<0))
#Instream RSF
Storage_Means$Instream_95L <- quantile(Storage$Instream, probs = 0.025, na.rm = TRUE)
Storage_Means$Instream_95H <- quantile(Storage$Instream, probs = 0.975, na.rm = TRUE)
Storage_Means$Instream_80L <- quantile(Storage$Instream, probs = 0.1, na.rm = TRUE)
Storage_Means$Instream_80H <- quantile(Storage$Instream, probs = 0.9, na.rm = TRUE)
Storage_Means$I_Percent_Support <- ifelse(mean(Storage$Instream)>0,
mean(Storage$Instream>0),
mean(Storage$Instream<0))
#Canopy RSF
Storage_Means$Canopy_95L <- quantile(Storage$Canopy, probs = 0.025, na.rm = TRUE)
Storage_Means$Canopy_95H <- quantile(Storage$Canopy, probs = 0.975, na.rm = TRUE)
Storage_Means$Canopy_80L <- quantile(Storage$Canopy, probs = 0.1, na.rm = TRUE)
Storage_Means$Canopy_80H <- quantile(Storage$Canopy, probs = 0.9, na.rm = TRUE)
Storage_Means$C_Percent_Support <- ifelse(mean(Storage$Canopy)>0,
mean(Storage$Canopy>0),
mean(Storage$Canopy<0))
#Organize and round dataframe
Storage_Means = Storage_Means %>%                                                                                             #Use  dput(colnames(Storage_Means))  to print all column namesr
select("Velocity Coef", "Velocity_95L", "Velocity_95H", "Velocity_80L", "Velocity_80H", "V_Percent_Support",                #RSF
"Depth Coef", "Depth_95L", "Depth_95H", "Depth_80L", "Depth_80H", "D_Percent_Support",
"Sub Coef", "Sub_95L", "Sub_95H", "Sub_80L", "Sub_80H", "S_Percent_Support",
"VelFull Coef", "VelFull_95L", "VelFull_95H", "VelFull_80L", "VelFull_80H", "VF_Percent_Support",
"DepthFull Coef", "DepthFull_95L", "DepthFull_95H", "DepthFull_80L", "DepthFull_80H", "DF_Percent_Support",
"Instream Coef", "Instream_95L", "Instream_95H", "Instream_80L", "Instream_80H", "I_Percent_Support",
"Canopy Coef", "Canopy_95L", "Canopy_95H", "Canopy_80L", "Canopy_80H", "C_Percent_Support",
"Velocity_25", "Velocity_75", "Velocity_t_stat_50", "Velocity_p_50",                                                 #HSC
"Velocity_5", "Velocity_95", "Velocity_t_stat_90", "Velocity_p_90", 'Velocity_Min', 'Velocity_Max',
"Depth_25", "Depth_75", "Depth_t_stat_50", "Depth_p_50",
"Depth_5", "Depth_95", "Depth_t_stat_90", "Depth_p_90", 'Depth_Min', 'Depth_Max',
"Substrate_25", "Substrate_75", "Substrate_t_stat_50", "Substrate_p_50",
"Substrate_5", "Substrate_95", "Substrate_t_stat_90", "Substrate_p_90", 'Substrate_Min', 'Substrate_Max',
"Instream_25", "Instream_75", "Instream_t_stat_50", "Instream_p_50",
"Instream_5", "Instream_95", "Instream_t_stat_90", "Instream_p_90", 'Instream_Min', 'Instream_Max',
"Canopy_Chi", "Canopy_P", "C_Prob_Support0.05", 'Canopy_Min', 'Canopy_Max') %>%
mutate(across(c("Velocity_t_stat_50", "Velocity_t_stat_90", "Depth_t_stat_50", "Depth_t_stat_90",                       #round to match critical tstat
"Substrate_t_stat_50", "Substrate_t_stat_90", "Instream_t_stat_50", "Instream_t_stat_90",
"Instream_t_stat_50",  "Instream_t_stat_90", "Canopy_Chi"
), round, 4)) %>%
mutate(across(c("Velocity Coef", "Depth Coef", "Sub Coef", "VelFull Coef", "DepthFull Coef", "Instream Coef", "Canopy Coef",             #regression results (coefficients) commonly rounded 2 places, add 1 because it's a mean
"Velocity_95L", "Velocity_95H", "Velocity_80L", "Velocity_80H", "Depth_95L", "Depth_95H", "Depth_80L", "Depth_80H",      #round CI 1 beyond raw data (coefficients = 2)
"Sub_95L", "Sub_95H", "Sub_80L", "Sub_80H", "VelFull_95L", "VelFull_95H", "VelFull_80L", "VelFull_80H",
"DepthFull_95L", "DepthFull_95H", "DepthFull_80L", "DepthFull_80H", "Instream_95L", "Instream_95H", "Instream_80L",
"Instream_80H", "Canopy_95L", "Canopy_95H", "Canopy_80L", "Canopy_80H",
"Velocity_25", "Velocity_75", "Velocity_5", "Velocity_95",
"Depth_25", "Depth_75", "Depth_5", "Depth_95", "Substrate_25", "Substrate_75",
"Substrate_5", "Substrate_95", "Instream_25", "Instream_75",
"Instream_5", "Instream_95", "Canopy_P",
'Velocity_Min', 'Velocity_Max', 'Instream_Min', 'Instream_Max', 'Canopy_Min', 'Canopy_Max'                             #round 1 place beyond raw data (velocity, instream, canopy are all 2 places)
), round, 3))
}
#Add variable combination to Dataframe
One_Row <- data.frame(Species = Species_Abb,
Stream = Stream_Abb,
Group = Group_Abb,
Mesohabitat = Mesohabitat_Abb,
Observed = Observed_Individuals,
Unique = Unique_Individuals,
Available = Available) %>%
bind_cols(Storage_Means)
#Add current run to new Dataframe (All Rows)
if(is.null(All_Rows)){                                                        #The first run through there will be no All Rows
All_Rows <- One_Row                                                          #So this creates All Rows from One Row
} else {
All_Rows <- All_Rows %>%                                                    #Subsequent runs One Row gets added to All Rows
bind_rows(One_Row)
}
}
}
